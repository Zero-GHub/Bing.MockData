<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bing.MockData</name>
    </assembly>
    <members>
        <member name="T:Bing.MockData.Abstractions.Options.IDateTimeFieldOptions">
            <summary>
            时间配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IDateTimeFieldOptions.From">
            <summary>
            开始-从
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IDateTimeFieldOptions.To">
            <summary>
            结束-至
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IDateTimeFieldOptions.IncludeTime">
            <summary>
            是否包含时间
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Options.IGuidFieldOptions">
            <summary>
            Guid配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IGuidFieldOptions.Uppercase">
            <summary>
            是否大写字符
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Options.IIdCardFieldOptions">
            <summary>
            身份证配置
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Options.IMobileFieldOptions">
            <summary>
            手机号码配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IMobileFieldOptions.MobilePrefixs">
            <summary>
            手机号码前缀
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IMobileFieldOptions.UseFake">
            <summary>
            是否生成虚假号码
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IMobileFieldOptions.FakePrefix">
            <summary>
            虚假号码前缀
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.IMobileFieldOptions.Length">
            <summary>
            手机号码长度
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Options.INumberFieldOptions`1">
            <summary>
            数值配置
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="T:Bing.MockData.Abstractions.Options.IStringFieldOptions">
            <summary>
            字符串配置
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Options.ITimeSpanFieldOptions">
            <summary>
            时间跨度配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.ITimeSpanFieldOptions.Format">
            <summary>
            格式化。
            请参考：https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.ITimeSpanFieldOptions.From">
            <summary>
            开始-从
            </summary>
        </member>
        <member name="P:Bing.MockData.Abstractions.Options.ITimeSpanFieldOptions.To">
            <summary>
            结束-至
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.IDateTimeRandomizer">
            <summary>
            日期时间随机生成器
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.IGuidRandomizer">
            <summary>
            Guid随机生成器
            </summary>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.IIdCardRandomizer">
            <summary>
            身份证随机生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IIdCardRandomizer.Generate">
            <summary>
            生成身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IIdCardRandomizer.GenerateIssueOrg">
            <summary>
            生成签发机关：XXX公安局/XX区分局
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IIdCardRandomizer.GenerateValidPeriod">
            <summary>
            生成有效期限
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.IMobileRandomizer">
            <summary>
            手机号码随机生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IMobileRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.INumberRandomizer`1">
            <summary>
            数值随机生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.INumberRandomizer`1.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.IRandomizer`1">
            <summary>
            随机生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IRandomizer`1.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IRandomizer`1.GenerateAsString">
            <summary>
            生成并转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.IStringRandomizer">
            <summary>
            字符串随机生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IStringRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Abstractions.Randomizers.IStringRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Abstractions.Randomizers.ITimeSpanRandomizer">
            <summary>
            时间跨度随机生成器
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.BooleanFieldOptions">
            <summary>
            布尔值配置
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.ByteFieldOptions">
            <summary>
            byte 配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ByteFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ByteFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.ChineseIdCardFieldOptions">
            <summary>
            身份证
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ChineseIdCardFieldOptions.BeginYear">
            <summary>
            身份证有效期起始年份
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ChineseIdCardFieldOptions.EndYear">
            <summary>
            身份证有效期结束年份
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ChineseIdCardFieldOptions.ValidYear">
            <summary>
            身份证有效年份长度
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.CityFieldOptions">
            <summary>
            城市配置
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.CountryFieldOptions">
            <summary>
            国家配置
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.DateTimeFieldOptions">
            <summary>
            时间配置
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Options.DateTimeFieldOptions.DefaultFormat">
            <summary>
            默认格式。s -> 可排序的日期/时间模式
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.DateTimeFieldOptions.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.DateTimeFieldOptions.From">
            <summary>
            开始-从
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.DateTimeFieldOptions.To">
            <summary>
            结束-至
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.DateTimeFieldOptions.IncludeTime">
            <summary>
            是否包含时间
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.DoubleFieldOptions">
            <summary>
            double 配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.DoubleFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.DoubleFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.EmailAddressFieldOptions">
            <summary>
            邮箱地址配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.EmailAddressFieldOptions.Male">
            <summary>
            是否男性
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.EmailAddressFieldOptions.Female">
            <summary>
            是否女性
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.EmailAddressFieldOptions.Left2Right">
            <summary>
            是否左右
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.FieldOptionsBase">
            <summary>
            配置基类
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FieldOptionsBase.UseNullValues">
            <summary>
            是否可空值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FieldOptionsBase.ValueAsString">
            <summary>
            是否可输出字符串
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Options.FieldOptionsBase.Clone">
            <summary>
            克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Options.FirstNameFieldOptions">
            <summary>
            名字配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FirstNameFieldOptions.Male">
            <summary>
            是否男性
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FirstNameFieldOptions.Female">
            <summary>
            是否女性
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.FloatFieldOptions">
            <summary>
            float 配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FloatFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FloatFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.FullNameFieldOptions">
            <summary>
            全名配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FullNameFieldOptions.Male">
            <summary>
            是否男性
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FullNameFieldOptions.Female">
            <summary>
            是否女性
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.FullNameFieldOptions.Left2Right">
            <summary>
            是否左右
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.GuidFieldOptions">
            <summary>
            Guid配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.GuidFieldOptions.Uppercase">
            <summary>
            是否大写字符
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.IBANFieldOptions">
            <summary>
            银行账号配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IBANFieldOptions.CountryCode">
            <summary>
            国家代码
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IBANFieldOptions.Type">
            <summary>
            类型。IBAN、BBAN、BOTH
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.IntFieldOptions">
            <summary>
            int 配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IntFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IntFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.IPv4AddressFieldOptions">
            <summary>
            IP4地址配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IPv4AddressFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IPv4AddressFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.IPv6AddressFieldOptions">
            <summary>
            IP6地址配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IPv6AddressFieldOptions.Uppercase">
            <summary>
            是否大写字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IPv6AddressFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.IPv6AddressFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.LastNameFieldOptions">
            <summary>
            姓氏配置
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.LongFieldOptions">
            <summary>
            long 配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.LongFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.LongFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.MACAddressFieldOptions">
            <summary>
            MAC地址配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MACAddressFieldOptions.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MACAddressFieldOptions.Uppercase">
            <summary>
            是否大写字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MACAddressFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MACAddressFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.MobileFieldOptions">
            <summary>
            手机号码配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MobileFieldOptions.MobilePrefixs">
            <summary>
            手机号码前缀
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MobileFieldOptions.UseFake">
            <summary>
            是否生成虚假号码
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MobileFieldOptions.FakePrefix">
            <summary>
            虚假号码前缀
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.MobileFieldOptions.Length">
            <summary>
            手机号码长度
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.NumberFieldOptions`1">
            <summary>
            数值配置
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:Bing.MockData.Core.Options.NumberFieldOptions`1.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.NumberFieldOptions`1.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.ShortFieldOptions">
            <summary>
            short 配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ShortFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.ShortFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.StringListFieldOptions">
            <summary>
            字符串列表配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.StringListFieldOptions.Values">
            <summary>
            值列表
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.TextFieldOptions">
            <summary>
            文本配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.UseUppercase">
            <summary>
            使用大写字母
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.UseLowercase">
            <summary>
            使用小写字母
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.UseLetter">
            <summary>
            使用字母
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.UseNumber">
            <summary>
            使用数字
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.UseSpace">
            <summary>
            使用空格
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextFieldOptions.UseSpecial">
            <summary>
            使用特殊符号
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.TextLipsumFieldOptions">
            <summary>
            段落配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextLipsumFieldOptions.Paragraphs">
            <summary>
            段落
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.TextRegexFieldOptions">
            <summary>
            正则表达式配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextRegexFieldOptions.Pattern">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.TextWordsFieldOptions">
            <summary>
            单词配置
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextWordsFieldOptions.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TextWordsFieldOptions.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Options.TimeSpanFieldOptions">
            <summary>
            时间跨度配置
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Options.TimeSpanFieldOptions.DefaultFormat">
            <summary>
            默认格式。c -> 常量格式
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TimeSpanFieldOptions.Format">
            <summary>
            格式化。
            请参考：https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TimeSpanFieldOptions.From">
            <summary>
            开始-从
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TimeSpanFieldOptions.To">
            <summary>
            结束-至
            </summary>
        </member>
        <member name="P:Bing.MockData.Core.Options.TimeSpanFieldOptions.IncludeMilliseconds">
            <summary>
            是否包含毫秒数
            </summary>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer">
            <summary>
            身份证随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer._generator">
            身份证号码
            1、号码的结构
            公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，
            八位数字出生日期码，三位数字顺序码和一位数字校验码。
            2、地址码(前六位数）
            表示编码对象常住户口所在县(市、旗、区)的行政区划代码，按GB/T2260的规定执行。
            3、出生日期码（第七位至十四位）
            表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。
            4、顺序码（第十五位至十七位）
            表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，
            顺序码的奇数分配给男性，偶数分配给女性。
            5、校验码（第十八位数）
            （1）十七位数字本体码加权求和公式 S = Sum(Ai * Wi), i = 0, ... , 16 ，先对前17位数字的权求和
            Ai:表示第i位置上的身份证号码数字值 Wi:表示第i位置上的加权因子 Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4
            2 （2）计算模 Y = mod(S, 11) （3）通过模得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0
            X 9 8 7 6 5 4 3 2
            <summary>
            生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.VerifyCode">
            <summary>
            校验码
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.VerifyCodeWeight">
            <summary>
            校验码权值
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.#ctor(Bing.MockData.Core.Options.ChineseIdCardFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer"/>类型的实例
            </summary>
            <param name="options">身份证配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.Generate">
            <summary>
            生成身份证号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.GenerateIssueOrg">
            <summary>
            生成签发机关：XXX公安局/XX区分局
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.GenerateValidPeriod">
            <summary>
            生成有效期限
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.ChineseIdCardRandomizer.CalculateVerifyCode(System.String)">
            <summary>
            计算校验码
            </summary>
            <param name="source">身份证号码</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.CityRandomizer">
            <summary>
            城市随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.CityRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.CityRandomizer.#ctor(Bing.MockData.Core.Options.CityFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.CityRandomizer"/>类型的实例
            </summary>
            <param name="options">城市配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.CityRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.CityRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.CountryRandomizer">
            <summary>
            国家随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.CountryRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.CountryRandomizer.#ctor(Bing.MockData.Core.Options.CountryFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.CountryRandomizer"/>类型的实例
            </summary>
            <param name="options">国家配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.CountryRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.CountryRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.DateTimeRandomizer">
            <summary>
            日期时间随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.DateTimeRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.DateTimeRandomizer.#ctor(Bing.MockData.Core.Options.DateTimeFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.DateTimeRandomizer"/>类型的实例
            </summary>
            <param name="options">日期时间配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.DateTimeRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.DateTimeRandomizer.GenerateAsString">
            <summary>
            生成并转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.EmailAddressRandomizer">
            <summary>
            邮箱地址随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.EmailAddressRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.EmailAddressRandomizer._numberGenerator">
            <summary>
            数字生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.EmailAddressRandomizer._topLevelDomainGenerator">
            <summary>
            顶级域名生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.EmailAddressRandomizer._lastNamesGenerator">
            <summary>
            姓氏生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.EmailAddressRandomizer._genderSetGenerators">
            <summary>
            性别生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.EmailAddressRandomizer.#ctor(Bing.MockData.Core.Options.EmailAddressFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.EmailAddressRandomizer"/>类型的实例
            </summary>
            <param name="options">邮箱地址配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.EmailAddressRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.EmailAddressRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.FirstNameRandomizer">
            <summary>
            名字随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.FirstNameRandomizer._numberGenerator">
            <summary>
            数字生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.FirstNameRandomizer._genderSetGenerators">
            <summary>
            性别生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.FirstNameRandomizer.#ctor(Bing.MockData.Core.Options.FirstNameFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.FirstNameRandomizer"/>类型的实例
            </summary>
            <param name="options">名字配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.FirstNameRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.FirstNameRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.FullNameRandomizer">
            <summary>
            全名随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.FullNameRandomizer._numberGenerator">
            <summary>
            数字生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.FullNameRandomizer._lastNameGenerator">
            <summary>
            姓氏生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.FullNameRandomizer._genderSetGenerators">
            <summary>
            性别生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.FullNameRandomizer.#ctor(Bing.MockData.Core.Options.FullNameFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.FullNameRandomizer"/>类型的实例
            </summary>
            <param name="options">全名配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.FullNameRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.FullNameRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.GuidRandomizer">
            <summary>
            Guid随机生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.GuidRandomizer.#ctor(Bing.MockData.Core.Options.GuidFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.GuidRandomizer"/>类型的实例
            </summary>
            <param name="options">Guid配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.GuidRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.GuidRandomizer.GenerateAsString">
            <summary>
            生成并转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.IBANRandomizer">
            <summary>
            银行账号随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IBANRandomizer._itemGenerator">
            <summary>
            项生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IBANRandomizer.#ctor(Bing.MockData.Core.Options.IBANFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.IBANRandomizer"/>类型的实例
            </summary>
            <param name="options">银行账号配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IBANRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IBANRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer">
            <summary>
            IP4地址随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer._defaultMin">
            <summary>
            默认最小值
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer._defaultMax">
            <summary>
            默认最大值
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer._generators">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer.#ctor(Bing.MockData.Core.Options.IPv4AddressFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer"/>类型的实例
            </summary>
            <param name="options">IP4配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IPv4AddressRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer">
            <summary>
            IP6地址随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer._defaultMin">
            <summary>
            默认最小值
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer._defaultMax">
            <summary>
            默认最大值
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer._generators">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer.#ctor(Bing.MockData.Core.Options.IPv6AddressFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer"/>类型的实例
            </summary>
            <param name="options">IP6配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.IPv6AddressRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.LastNameRandomizer">
            <summary>
            姓氏随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.LastNameRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.LastNameRandomizer.#ctor(Bing.MockData.Core.Options.LastNameFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.LastNameRandomizer"/>类型的实例
            </summary>
            <param name="options">姓氏配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.LastNameRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.LastNameRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.MACAddressRandomizer">
            <summary>
            MAC地址随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.MACAddressRandomizer._defaultMin">
            <summary>
            默认最小值
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.MACAddressRandomizer._defaultMax">
            <summary>
            默认最大值
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.MACAddressRandomizer._generators">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MACAddressRandomizer.#ctor(Bing.MockData.Core.Options.MACAddressFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.MACAddressRandomizer"/>类型的实例
            </summary>
            <param name="options">MAC地址配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MACAddressRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MACAddressRandomizer.InternalGenerate">
            <summary>
            内部生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MACAddressRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.MobileRandomizer">
            <summary>
            手机号码随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.MobileRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MobileRandomizer.#ctor(Bing.MockData.Core.Options.MobileFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.MobileRandomizer"/>类型的实例
            </summary>
            <param name="options">手机号码配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MobileRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.MobileRandomizer.GetMobilePrefix">
            <summary>
            获取手机号码前缀
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.NumberRandomizer`1">
            <summary>
            数值随机生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.NumberRandomizer`1._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.NumberRandomizer`1.#ctor(Bing.MockData.Core.Options.NumberFieldOptions{`0})">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.NumberRandomizer`1"/>类型的实例
            </summary>
            <param name="options">数值配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.NumberRandomizer`1.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.RandomizerBase`1">
            <summary>
            随机生成器基类
            </summary>
            <typeparam name="TOptions"></typeparam>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.RandomizerBase`1.Rnd">
            <summary>
            随机数器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.RandomizerBase`1.Options">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.RandomizerBase`1.#ctor(`0)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.RandomizerBase`1"/>类型的实例
            </summary>
            <param name="options">配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.RandomizerBase`1.IsNull">
            <summary>
            是否为空
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.StringListRandomizer">
            <summary>
            字符串列表随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.StringListRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.StringListRandomizer.#ctor(Bing.MockData.Core.Options.StringListFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.StringListRandomizer"/>类型的实例
            </summary>
            <param name="options">字符串列表配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.StringListRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.StringListRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.TextLipsumRandomizer">
            <summary>
            段落随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.TextLipsumRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextLipsumRandomizer.#ctor(Bing.MockData.Core.Options.TextLipsumFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.TextLipsumRandomizer"/>类型的实例
            </summary>
            <param name="options">段落配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextLipsumRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextLipsumRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.TextRandomizer">
            <summary>
            文本随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.TextRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextRandomizer.#ctor(Bing.MockData.Core.Options.TextFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.TextRandomizer"/>类型的实例
            </summary>
            <param name="options">文本配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.TextRegexRandomizer">
            <summary>
            正则表达式随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.TextRegexRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextRegexRandomizer.#ctor(Bing.MockData.Core.Options.TextRegexFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.TextRegexRandomizer"/>类型的实例
            </summary>
            <param name="options">正则表达式配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextRegexRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextRegexRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.TextWordsRandomizer">
            <summary>
            单词随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.TextWordsRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.TextWordsRandomizer._numberGenerator">
            <summary>
            数量生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextWordsRandomizer.#ctor(Bing.MockData.Core.Options.TextWordsFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.TextWordsRandomizer"/>类型的实例
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextWordsRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TextWordsRandomizer.Generate(System.Boolean)">
            <summary>
            生成
            </summary>
            <param name="upperCase">是否大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Core.Randomizers.TimeSpanRandomizer">
            <summary>
            时间跨度随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Core.Randomizers.TimeSpanRandomizer._generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TimeSpanRandomizer.#ctor(Bing.MockData.Core.Options.TimeSpanFieldOptions)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Core.Randomizers.TimeSpanRandomizer"/>类型的实例
            </summary>
            <param name="options">时间跨度配置</param>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TimeSpanRandomizer.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Core.Randomizers.TimeSpanRandomizer.GenerateAsString">
            <summary>
            生成并转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Datas.ListData">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.LastNames">
            <summary>
            姓氏
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.MaleNames">
            <summary>
            男性名称
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.FemaleNames">
            <summary>
            女性名称
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.CityNames">
            <summary>
            城市名称
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.CountryNames">
            <summary>
            国家名称
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.Directions">
            <summary>
            方向
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.StreetType">
            <summary>
            街道类型
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.TopLevelDomains">
            <summary>
            顶级域名
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.IBANs">
            <summary>
            国际银行帐户号码
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.BBANs">
            <summary>
            基本银行帐户号码
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.ProvinceCityList">
            <summary>
            省市 列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.CityNameList">
            <summary>
            城市 列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.AreaCodeDict">
            <summary>
            行政代码 列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.RegionList">
            <summary>
            大区 列表
            </summary>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Datas.ListData"/>类型的实例
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.ListData.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:Bing.MockData.Datas.ListData.Nested">
            <summary>
            嵌套类
            </summary>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.Nested.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="F:Bing.MockData.Datas.ListData.Nested.TextInstance">
            <summary>
            文本实例
            </summary>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.GetResourceAsStream(System.String,System.String)">
            <summary>
            从指定资源名称中获取流
            </summary>
            <param name="resourceName">资源名称</param>
            <param name="suffix">后缀名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.GetResourceAsString(System.String,System.String)">
            <summary>
            从指定资源中获取字符串
            </summary>
            <param name="fileName">文件名称</param>
            <param name="suffix">后缀名</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.GetResourceAsLines(System.String)">
            <summary>
            从指定资源中获取行列表
            </summary>
            <param name="fileName">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.GetResourceAsItems``1(System.String,System.Func{System.String[],``0})">
            <summary>
            从指定资源中获取列表项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="fileName">文件名称</param>
            <param name="convert">转换方式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.GetResourceFromJson``1(System.String)">
            <summary>
            从指定资源中获取Json对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="fileName">文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Datas.ListData.LoadCustomResource(System.Action{Bing.MockData.Datas.ListData})">
            <summary>
            加载自定义资源
            </summary>
            <param name="action">加载配置操作</param>
        </member>
        <member name="T:Bing.MockData.Datas.Models.IBAN">
            <summary>
            国际银行帐户号码
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.Models.IBAN.CountryName">
            <summary>
            国家名称
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.Models.IBAN.CountryCode">
            <summary>
            国家编码
            </summary>
        </member>
        <member name="P:Bing.MockData.Datas.Models.IBAN.Generator">
            <summary>
            生成器
            </summary>
        </member>
        <member name="T:Bing.MockData.Extensions.StringExtensions">
            <summary>
            字符串扩展
            </summary>
        </member>
        <member name="M:Bing.MockData.Extensions.StringExtensions.ToCasedInvariant(System.String,System.Boolean)">
            <summary>
            将字符串进行大小写处理
            </summary>
            <param name="str">字符串</param>
            <param name="toUpper">转换成大写</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Factories.RandomizerFactory">
            <summary>
            随机生成器工厂
            </summary>
        </member>
        <member name="F:Bing.MockData.Factories.RandomizerFactory.Cache">
            <summary>
            缓存字典
            </summary>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer(Bing.MockData.Abstractions.Options.IStringFieldOptions)">
            <summary>
            获取字符串随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer(Bing.MockData.Abstractions.Options.IGuidFieldOptions)">
            <summary>
            获取Guid随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer``1(Bing.MockData.Abstractions.Options.INumberFieldOptions{``0})">
            <summary>
            获取数值随机生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer(Bing.MockData.Abstractions.Options.IDateTimeFieldOptions)">
            <summary>
            获取日期时间随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer(Bing.MockData.Abstractions.Options.ITimeSpanFieldOptions)">
            <summary>
            获取时间跨度随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer(Bing.MockData.Abstractions.Options.IMobileFieldOptions)">
            <summary>
            获取手机号码随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizer(Bing.MockData.Abstractions.Options.IIdCardFieldOptions)">
            <summary>
            获取身份证随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.GetRandomizerAsDynamic(System.Object)">
            <summary>
            获取随机生成器并转换成动态对象
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.Create``1(System.Object)">
            <summary>
            创建随机生成器
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Factories.RandomizerFactory.CreateRandomizer(System.Object)">
            <summary>
            创建随机生成器
            </summary>
            <param name="options">配置</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Internals.Generators.RandomGenerator">
            <summary>
            随机生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomGenerator._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomGenerator._repeat">
            <summary>
            重复数
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.#ctor">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Internals.Generators.RandomGenerator"/>类型的实例
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.#ctor(System.Int32)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Internals.Generators.RandomGenerator"/>类型的实例
            </summary>
            <param name="seed">种子数</param>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.GenerateNumber(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="length">数字长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.GenerateInt(System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="maxValue">最大值，包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.GenerateInt(System.Int32,System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值，不包含边界</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.GenerateDate(System.Int32,System.Int32)">
            <summary>
            生成随机日期
            </summary>
            <param name="beginYear">起始年份</param>
            <param name="endYear">结束年份</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomGenerator.IsLeapYear(System.Int32)">
            <summary>
            是否闰年
            </summary>
            <param name="year">年份</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Internals.Generators.RandomItemFromListGenerator`1">
            <summary>
            随机列表项生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomItemFromListGenerator`1._list">
            <summary>
            列表
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomItemFromListGenerator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Boolean})">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Internals.Generators.RandomItemFromListGenerator`1"/>类型的实例
            </summary>
            <param name="list">数据源</param>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomItemFromListGenerator`1.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Internals.Generators.RandomStringFromListGenerator">
            <summary>
            随机字符串项生成器
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringFromListGenerator.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Internals.Generators.RandomStringFromListGenerator"/>类型的实例
            </summary>
            <param name="list">数据源</param>
        </member>
        <member name="T:Bing.MockData.Internals.Generators.RandomStringGenerator">
            <summary>
            随机字符串生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._useUpperCaseCharacters">
            <summary>
            是否使用大写字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._useLowerCaseCharacters">
            <summary>
            是否使用小写字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._useNumericCharacters">
            <summary>
            是否使用数字字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._useSpecialCharacters">
            <summary>
            是否使用特殊字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._useSpaceCharacters">
            <summary>
            是否使用空白字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._patternDriven">
            <summary>
            驱动模式
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._currentUpperCaseCharacters">
            <summary>
            当前大写字符列表
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._currentLowerCaseCharacters">
            <summary>
            当前小写字符列表
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._currentNumericCharacters">
            <summary>
            当前数字字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._currentSpecialCharacters">
            <summary>
            当前特殊字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._currentSpaceCharacters">
            <summary>
            当前空白字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._currentGeneralCharacters">
            <summary>
            当前所有使用的字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._existingStrings">
            <summary>
            已存在的字符串
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator._pattern">
            <summary>
            模式
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.Pattern">
            <summary>
            定义生成字符串时要遵循的模式。
            如果它等于空字符串，则忽略该值。
            模式：
            L - 大写字符
            l - 小写字符
            n - 数字字符
            s - 特殊字符
            _ - 空白字符
            * - 任意字符
            \ - 原样输出字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator.RepeatCharacters">
            <summary>
            是否可重复字符
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomStringGenerator.UniqueString">
            <summary>
            是否唯一字符串
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.UseUpperCaseCharacters">
            <summary>
            是否使用大写字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.UpperCaseCharacters">
            <summary>
            大写字符列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.UseLowerCaseCharacters">
            <summary>
            是否使用小写字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.LowerCaseCharacters">
            <summary>
            小写字符列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.UseNumericCharacters">
            <summary>
            是否使用数字字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.NumericCharacters">
            <summary>
            数字字符列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.UseSpaceCharacters">
            <summary>
            是否使用空白字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.SpaceCharacters">
            <summary>
            空白字符列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.UseSpecialCharacters">
            <summary>
            是否使用特殊字符
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.SpecialCharacters">
            <summary>
            特殊字符列表
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.MinUpperCaseCharacters">
            <summary>
            最少大写字符数量
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.MinLowerCaseCharacters">
            <summary>
            最少小写字符数量
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.MinNumericCharacters">
            <summary>
            最少数字字符数量
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.MinSpecialCharacters">
            <summary>
            最少特殊字符数量
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomStringGenerator.MinSpaceCharacters">
            <summary>
            最少空白字符数量
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Internals.Generators.RandomStringGenerator"/>类型的实例
            </summary>
            <param name="useUpperCaseCharacters">是否使用大写字符</param>
            <param name="useLowerCaseCharacters">是否使用小写字符</param>
            <param name="useNumericCharacters">是否使用数字字符</param>
            <param name="useSpecialCharacters">是否使用特殊字符</param>
            <param name="useSpaceCharacters">是否使用空白字符</param>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.Generate(System.String)">
            <summary>
            生成字符串，按照指定模式生成。
            定义生成字符串时要遵循的模式。
            如果它等于空字符串，则忽略该值。
            模式：
            L - 大写字符
            l - 小写字符
            n - 数字字符
            s - 特殊字符
            _ - 空白字符
            * - 任意字符
            \ - 原样输出字符
            </summary>
            <param name="pattern">生成模板</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            生成一个指定范围的可变长度的字符串
            </summary>
            <param name="minLength">最小字符串长度</param>
            <param name="maxLength">最大字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.Generate(System.Int32)">
            <summary>
            生成一个指定长度的字符串
            </summary>
            <param name="fixedLength">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.AddExistingString(System.String)">
            <summary>
            将字符串添加到历史数组以支持唯一字符串生成
            </summary>
            <param name="s">字符串</param>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.GenerateString(System.Int32)">
            <summary>
            生成字符串
            </summary>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.PatternDrivenAlgo(System.String)">
            <summary>
            按照模式生成随机字符串
            </summary>
            <param name="pattern">模式</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.SimpleGenerateAlgo(System.Int32)">
            <summary>
            简单生成一个随机字符串。该生成方式没有限制
            </summary>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.GenerateAlgoWithLimits(System.Int32)">
            <summary>
            生成一个随机字符串，其中包含每个字符集指定的最小字符数
            </summary>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.GetRandomInt">
            <summary>
            随机生成16位整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomStringGenerator.GetRandomCharFromArray(System.Char[],System.Collections.Generic.List{System.Char})">
            <summary>
            从所选的字符数组中获取随机字符
            </summary>
            <param name="array">字符数组</param>
            <param name="existenItems">已存在字符列表</param>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Internals.Generators.RandomThingsGenerator`1">
            <summary>
            随机数据生成器
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomThingsGenerator`1._min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomThingsGenerator`1._max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomThingsGenerator`1.#ctor(`0,`0)">
            <summary>
            初始化一个<see cref="T:Bing.MockData.Internals.Generators.RandomThingsGenerator`1"/>类型的实例
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomThingsGenerator`1.Generate">
            <summary>
            生成
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bing.MockData.Internals.Generators.RandomValueGenerator">
            <summary>
            随机值生成器
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomValueGenerator.Tolerance">
            <summary>
            容错值
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomValueGenerator._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomValueGenerator._storedUniformDeviate">
            <summary>
            存储统一偏差
            </summary>
        </member>
        <member name="F:Bing.MockData.Internals.Generators.RandomValueGenerator._storedUniformDeviateIsGood">
            <summary>
            是否存储统一偏差
            </summary>
        </member>
        <member name="P:Bing.MockData.Internals.Generators.RandomValueGenerator.SupportedTypes">
            <summary>
            已支持类型
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.NextDouble">
            <summary>
            获取一个介于0.0和1.0之间的随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.NextBoolean">
            <summary>
            获取一个介于true和false的随机布尔值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next``1(``0,``0)">
            <summary>
            获取指定范围的随机整数，该范围包括最小值，但不包括最大值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.Byte,System.Byte)">
            <summary>
            获取指定范围的随机数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.Int16,System.Int16)">
            <summary>
            获取指定范围的随机数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.Int32,System.Int32)">
            <summary>
            获取指定范围的随机数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.Int64,System.Int64)">
            <summary>
            获取指定范围的随机数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.Single,System.Single)">
            <summary>
            获取指定范围的随机数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.Double,System.Double)">
            <summary>
            获取指定范围的随机数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.DateTime,System.DateTime)">
            <summary>
            获取指定范围的随机时间，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.Next(System.TimeSpan,System.TimeSpan)">
            <summary>
            获取指定范围的随机时间跨度，该范围包括最小值，但不包括最大值
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.NextUniform">
            <summary>
            获取一个介于0.0和1.0之间的随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.NextEnum(System.Type)">
            <summary>
            获取指定枚举类型的随机枚举项
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.NextExponential">
            <summary>
            获取随机指数方差
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bing.MockData.Internals.Generators.RandomValueGenerator.NextNormal">
            <summary>
            获取随机正态分布的偏差
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
